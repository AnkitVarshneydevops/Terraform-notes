Terraform Remote State
=======================
-- Terraform keeps the remote state of the infrastructure.
-- It stores it in a file called terraform.tfstate. 
-- There is also a backup of the previous state in terraform.tfstate.backup,
   when you execute terraform apply, a new terraform.tfstate and backup is written. This is how terraform keeps track of the remote state. 
-- If the remote state changes and you hit terraform apply again, terraform will make changes to meet the correct remote state again. 
   for ex- you terminate an instance that is managed by terraform, after terraform apply it will be started again because 
   if you terminate the instance manually, the instance is gone and when you do terraform apply, terraform will notice that 
   instance doesnot exist anymore but you have the file that instance so just launch begin. You can keep the terraform.tfstate in version control e.g. git. 
   It gives you a history of your terraform.tfstate file(which is just a big JSON file). 
   It allows you to collaborate with other team members. 
   Unfortunately you can get conflicts when 2 people work at the same time. 
   Local state works well in the beginning, but when you project becomes bigger, 
   you might want to store your state remote. The terraform state can be saved remote, using the backend functionality in terraform. 
   The default is a local backend (the local terraform state file). 
   Other backens include: s3(with a locking mechanism using dyanmoDB), consul(with locking mechanism), terraform enterprise(the commercial solution). 
   Using the backend functionality has definitely benefits; 
   Working in a team: It allows for collaboration, the remote state will always be available for the whole team. 
   if your backend support locking like s3 in consul do, then you will not have issue of conflict, 
   only one person will be able to update the state at the same time. The state file is not stored locally.
   Possible sensitive information is now only stored in the remote state. 
   Some backends will enable remote operations. 
   The terraform apply will then run completely remote. 
   These are called the enhanced backends. 
   There are 2 steps to configure a remote state:
Add the backend code to a .tf file; Run the initialization process.
For example, to configure a consul remote store, you can add a file backend.tf with the following contents:

terraform {
	backend "consul" {
	  address = "demo.consul.io" # hostname of consul cluster
	  path = "terraform/myproject"
	}
}
== You can also store your state in s3:
terraform {
	backend "s3" {
	  bucket = "mybucket"
	  key = "terraform/myproject"
	  region="eu-west-1"
	}
}
== Using a remote store for the terraform state will ensure that you always have the latest version of the state.
== It avoids having to commit and push the terraform.tfstate to version control.
== Terraform remote stores don't always support locking.
   the documentation always mentions if locking is available for a remote store for e.g. s3 and consul support it.
== You can also specify a (read-only) remote store directly in the .tf file.
data "terraform_remote_state" "aws_state" {
	backend = "s3"
	config {
	   bucket = "terraform-state"
	   key = "terraform.tfstate"
	   access_key = "${var.AWS_ACCESS_KEY}"
	   secret_key = "${var.AWS_SECRET_KEY}"
	   region = "${var.AWS_REGION}"
	}
}
This is only useful as a read only feed from your remote file.
It is a datasource. useful to generate outputs. 
